# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger: none

jobs:
  - job: WindowsBuild
    pool:
      vmImage: 'windows-latest'
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
        Python38:
          python.version: '3.8'
        Python39:
          python.version: '3.9'
        Python310:
          python.version: '3.10'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
      displayName: 'Use Python $(python.version)'
    - script: |
        python -m pip install --upgrade pip
        pip install numpy
      displayName: 'Install dependencies'
    - script: |
        pip install wheel twine
      displayName: 'Install build tools'
    - script: |
        python setup.py sdist bdist_wheel
      displayName: 'Build wheel'
    - script: |
        twine upload -r pypi -u $(twineUsername) -p $(twinePassword) --skip-existing --disable-progress-bar dist/*
      displayName: 'Publish wheel to PyPi'

  - job: macOS10_15Build
    pool:
      vmImage: 'macOS-10.15'
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
        Python38:
          python.version: '3.8'
        Python39:
          python.version: '3.9'
        Python310:
          python.version: '3.10'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
      displayName: 'Use Python $(python.version)'
    - script: |
        python -m pip install --upgrade pip
        pip install numpy
      displayName: 'Install dependencies'
    - script: |
        pip install wheel twine
      displayName: 'Install build tools'
    - script: |
        python setup.py sdist bdist_wheel
      displayName: 'Build wheel'
    - script: |
        twine upload -r pypi -u $(twineUsername) -p $(twinePassword) --skip-existing --disable-progress-bar dist/*
      displayName: 'Publish wheel to PyPi'

  - job: macOS11Build
    pool:
      vmImage: 'macOS-11'
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
        Python38:
          python.version: '3.8'
        Python39:
          python.version: '3.9'
        Python310:
          python.version: '3.10'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
      displayName: 'Use Python $(python.version)'
    - script: |
        python -m pip install --upgrade pip
        pip install numpy
      displayName: 'Install dependencies'
    - script: |
        pip install wheel twine
      displayName: 'Install build tools'
    - script: |
        python setup.py sdist bdist_wheel
      displayName: 'Build wheel'
    - script: |
        twine upload -r pypi -u $(twineUsername) -p $(twinePassword) --skip-existing --disable-progress-bar dist/*
      displayName: 'Publish wheel to PyPi'

  - job: macOS12Build
    pool:
      vmImage: 'macOS-12'
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
        Python38:
          python.version: '3.8'
        Python39:
          python.version: '3.9'
        Python310:
          python.version: '3.10'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
      displayName: 'Use Python $(python.version)'
    - script: |
        python -m pip install --upgrade pip
        pip install numpy
      displayName: 'Install dependencies'
    - script: |
        pip install wheel twine
      displayName: 'Install build tools'
    - script: |
        python setup.py sdist bdist_wheel
      displayName: 'Build wheel'
    - script: |
        twine upload -r pypi -u $(twineUsername) -p $(twinePassword) --skip-existing --disable-progress-bar dist/*
      displayName: 'Publish wheel to PyPi'


  - job: Manylinux2014Build
    pool:
      vmImage: 'ubuntu-latest'
    container: quay.io/pypa/manylinux2014_x86_64:latest
    strategy:
      matrix:
        Python36:
          python.version: 'cp36-cp36m'
        Python37:
          python.version: 'cp37-cp37m'
        Python38:
          python.version: 'cp38-cp38'
        Python39:
          python.version: 'cp39-cp39'
        Python310:
          python.version: 'cp310-cp310'
    steps:
    - script: |
        "${PYBIN}/python" -m pip install --upgrade pip
        "${PYBIN}/python" -m pip install numpy twine
      displayName: 'Install dependencies and build tools'
      env:
        PYBIN: /opt/python/$(python.version)/bin
    - script: |
        "${PYBIN}/python" -m pip wheel . -w wheelhouse/
      displayName: 'Build wheels'
      env:
        PYBIN: /opt/python/$(python.version)/bin
    - script: |
        auditwheel repair wheelhouse/deap*.whl --plat manylinux2014_x86_64 -w wheelhouse-manylinux/
      displayName: 'Audit wheels'
    - script: |
        "${PYBIN}/python" -m twine upload -r pypi -u $(twineUsername) -p $(twinePassword) --skip-existing --disable-progress-bar wheelhouse-manylinux/*
      displayName: 'Publish wheel to PyPi'
      env:
        PYBIN: /opt/python/$(python.version)/bin

  - job: AArch64_Manylinux2014Build
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      matrix:
        Python36:
          python.version: 'cp36-cp36m'
          manylinux: 'manylinux_aarch64'
        Python37:
          python.version: 'cp37-cp37m'
          manylinux: 'manylinux_aarch64'
        Python38:
          python.version: 'cp38-cp38'
          manylinux: 'manylinux_aarch64'
        Python39:
          python.version: 'cp39-cp39'
          manylinux: 'manylinux_aarch64'
        Python310:
          python.version: 'cp310-cp310'
          manylinux: 'manylinux_aarch64'
    steps:
    - script: docker run --rm --privileged hypriot/qemu-register
      displayName: 'Registering qemu'
    - script: |
        docker run -v $(pwd):"${DOCKER_ROOT_DIRECTORY}":rw,z \
                   -e HOST_USER_ID \
                    "quay.io/pypa/manylinux2014_aarch64:latest" \
                    bash -c "cd $DOCKER_ROOT_DIRECTORY;
                    "${PYBIN}/pip" install --upgrade pip && \
                    "${PYBIN}/pip" install twine numpy && \
                    "${PYBIN}/pip" wheel . -w wheelhouse/ && \
                    auditwheel repair wheelhouse/deap*.whl --plat manylinux2014_aarch64 -w wheelhouse-manylinux && \
                    "${PYBIN}/python" -m twine upload -r pypi -u $(twineUsername) -p $(twinePassword) --skip-existing --disable-progress-bar wheelhouse-manylinux/*"
      displayName: 'Running AArch64 build'
      env:
        DOCKER_ROOT_DIRECTORY: "/home/source_root"
        HOST_USER_ID: $(id -u)
        PYBIN: /opt/python/$(python.version)/bin
